#include<iostream>
#include<fstream>
#include<math.h>
using namespace std;
/*
E 1.1

class complex {
	float re, im;
public:
	complex(float r, float i) {
		re = r;
		im = i;

	}
	complex(float r) {
		re = r;
		im = 0.0;
	}
	~complex() { cout << "destructor"; }
	complex mul(complex c1) {
		complex temp(0, 0);
		temp.re = re * c1.re - im * c1.im;
		temp.im = re * c1.im - im * c1.re;
		return temp;
	}
	complex operator*(complex c1) {
		mul(c1);
	}
	void display() {
		cout << re << endl;
	}
};
int main() {
	complex c(1);
}
E 1.3

template  <class T>
T Getmax(T a, T b) {
	T result;
	result = (a > b) ? a : b;
	return result;
}
int main() {
	int i = 5, j = 6, k;
	long l = 10, m = 5, n;
	k = Getmax<int>(i, j);
	n = Getmax<long>(l, m);
	cout << k << endl;
	cout << n << endl;
	return 0;
}
E 1.4

template <class T>
class mypair {
	T a, b;
public:
	mypair(T first, T second)
	{
		a = first;
		b = second;
	}
	T getmax();
};

tepmlate <class T>;
T mypair<T>::getmax() {
	T retval;
	retval a > b ? a : b;
	return retval;
}
int main() {
	mypair <int> myobject(100, 75);
	cout << myobject.getmax();
	return 0;
}
Ex : 1.2

template <class T>
class mypair {
	T a, b;
public:
	mypair(T first, T second)
	{
		a = first;
		b = second;
	}
	T getmin();
};

tepmlate <class T>;
T mypair<T>::getmin() {
	T retval;
	retval a < b ? b : a;
	return retval;
}
int main() {
	mypair <int> myobject(100, 75);
	cout << myobject.getmin();
	return 0;
}
E 1.5


template <class T,int N>
class mysequence {
	T memblock[N];
public:
	void setmember(int x, T value);
	T getmember(int x);
};
template <class T,int N>
 void mysequence<T,N>::setmember(int x,T value)
{
	memblock[x] value;
}
template <class T,int N>
T mysequence<T, N>::getmember(int x) {
return memblock[x] value;
}
int main()
{
	mysequence<int, 5>myints;
	mysequence<double, 5>myfloats;
	myints.setmember(0, 100);
	myfloats.setmember(3, 3.1416);
	cout << myints.getmember(0) << '\n';
	cout<<myfloats.getmember(3) << '\n';
	return 0;
}

E 1.3

template <class T, int N>
class mysequence {
	T memblock[N];
public:
	void setmember(int x, T value);
	T getmember(int x);
};
template <class T, int N>
void mysequence<T, N>::setmember(int x, T value)
{
	memblock[x] value;
}
template <class T, int N>
T mysequence<T, N>::getmember(int x) {
	return memblock[x] value;
}

int main()
{
	mysequence<int, 5>myints;
	myints.setmember(0, 100);
	cout << myints.getmember(0) << '\n';
	return 0;
}

E 1.6
*/
int main(void) {
	ofstream outFile;
	outFile.open("fout.txt");
	ifstream inFile("fin.txt");
	char ch;
	int count = 0;
	while (inFile.get(ch)) {
		outFile << ch;
		count++;
	}
	outFile << "\n\n Character count = " << count << endl;
	inFile.close();
	outFile.close();
	return 0;
}
